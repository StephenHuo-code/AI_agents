"""
本教程演示如何使用 LangChain 创建一个语言模型应用，
该应用可以总结文本并将摘要翻译成中文。
应用程序使用自定义函数、结构化工具和代理的组合来高效处理输入文本。
"""


from langchain.agents import AgentExecutor, create_tool_calling_agent
from langchain_openai import ChatOpenAI
from langchain.prompts import PromptTemplate
from langchain.tools import StructuredTool
from pydantic import BaseModel, Field
import os
from dotenv import load_dotenv
import gradio as gr


"""
一、定义模型
"""
load_dotenv()
os.environ["OPENAI_API_KEY"] = os.getenv('OPENAI_API_KEY')
llm = ChatOpenAI(model="gpt-4o-mini", max_tokens=1000, temperature=0)


"""
二、定义函数
"""

def summarize(text):
    # Create a PromptTemplate for summarization
    prompt = PromptTemplate(
        input_variables=["text"],  # Specify the input variable
        template="Summarize the following text:\n\n{text}\n\nSummary:"  # Define the template for summarization
    )
    chain = prompt | llm  # Create a chain by piping the prompt to the language model
    return chain.invoke({"text": text}).content  # Invoke the chain with the input text and return the content of the response

def translate(text):
    # Create a PromptTemplate for translation
    prompt = PromptTemplate(
        input_variables=["text"],  # Specify the input variable
        template="Translate the following text to chinese:\n\n{text}\n\nTranslation:"  # Define the template for translation
    )
    chain = prompt | llm  # Create a chain by piping the prompt to the language model
    return chain.invoke({"text": text}).content  # Invoke the chain with the input text and return the content of the response

class TextInput(BaseModel):
    # Define a Pydantic model for input validation
    text: str = Field(description="The text to summarize or translate")  # Define a text field with a description


"""
三、定义tools
"""


tools = [
    StructuredTool.from_function(
        func=summarize,  # The function to be wrapped as a tool
        name="Summarize",  # Name of the tool
        description="Useful for summarizing text",  # Description of what the tool does
        args_schema=TextInput  # The Pydantic model defining the input schema
    ),
    StructuredTool.from_function(
        func=translate,  # The function to be wrapped as a tool
        name="Translate",  # Name of the tool
        description="Useful for translating text to Chinese",  # Description of what the tool does
        args_schema=TextInput  # The Pydantic model defining the input schema
    )
]

"""
三、初始化化agent
"""
prompt = PromptTemplate(
    input_variables=["input", "agent_scratchpad"],  # Define the input variables for the prompt
    template="""Summarize the following text and then translate the summary to Chinese:

Text: {input}

Use the following steps:
1. Use the Summarize tool to summarize the text. Pass the entire text as the 'text' argument.
2. Use the Translate tool to translate the summary to chinese. Pass the summary as the 'text' argument.
3. After get response from tools,immediately generate response the final result in the following format:
   Summary (English): [English summary]
   Translation (Chinese): [Chinese translation]

Do not use any tools after providing the formatted output.

{agent_scratchpad}"""  # Define the template for the agent's instructions
)

# Create an agent using the defined tools and prompt
agent = create_tool_calling_agent(llm, tools, prompt)

# Create an AgentExecutor to run the agent
agent_executor = AgentExecutor(
    agent=agent,  # The agent to execute
    tools=tools,  # The tools available to the agent
    verbose=True,  # Enable verbose output
    max_iterations=3,  # Set maximum number of iterations
    early_stopping_method="force"  # Force stop after max_iterations
)


def run_agent_with_query(message, history):
    """
    Execute the agent with a given query and return the output.

    Args:
        message (str): The input text to be processed by the agent
        history (list): Chat history from Gradio ChatInterface

    Returns:
        str: The output generated by the agent after processing the query
    """
    result = agent_executor.invoke({"input": message})
    return result['output']


# 创建Gradio界面
demo = gr.ChatInterface(
    fn=run_agent_with_query,
    title="AI文字处理和翻译",
    description="应用程序使用自定义函数、结构化工具和代理的组合来高效处理输入文本",
    theme="soft",
)

"""
 Example text
The quick brown fox jumps over the lazy dog. This sentence is often used as a pangram in typography 
to display font examples, as it contains every letter of the English alphabet. However, it's not the only pangram 
in existence. Another example is 'Pack my box with five dozen liquor jugs', which is shorter but less commonly used.
"""


# 启动Gradio应用
if __name__ == "__main__":
    demo.launch()


 